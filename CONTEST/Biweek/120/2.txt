///Find Perimeter with largest Perimeter***

You are given an array of positive integers nums of length n.
A polygon is a closed plane figure that has at least 3 sides. The longest side of a polygon is smaller than the sum of its other sides.
Conversely, if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak.
The perimeter of a polygon is the sum of lengths of its sides.
Return the largest possible perimeter of a polygon whose sides can be formed from nums, or -1 if it is not possible to create a polygon.


Sol*****

#define ll long long

class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
//     sort(nums.begin(), nums.end());
//         int n = nums.size();
        
//         vector<long long> ans(n);

//         ans[0] = nums[0];

//         for (int i = 1; i < n; i++) {
//             ans[i] = ans[i - 1] + nums[i];
//         }

//         for (int i = n - 1; i >= 2; i--) {
//             if (nums[i] < ans[i - 1]) {
//                 return ans[i];
//             }
//         }

//         return -1;
        
        //Method 2
        int n = nums.size();
        sort(nums.begin(), nums.end());
        ll presum = nums[0] + nums[1];
        ll ans = 0;
        
        for(int i=2; i<n; i++)
        {
            if(presum > nums[i])
            {
                ans = max(ans, presum+nums[i]);
            }
            presum += nums[i]; 
        }
        
        return (ans == 0) ? -1 : ans;
        
    }
};


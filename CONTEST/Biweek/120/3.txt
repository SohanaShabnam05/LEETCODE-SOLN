****COUNT THE NUMBER OF INCREMOVABLE SUNARRAYS II****


You are given a 0-indexed array of positive integers nums.
A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.
Return the total number of incremovable subarrays of nums.
Note that an empty array is considered strictly increasing.
A subarray is a contiguous non-empty sequence of elements within an array.

Solution****


#define ll long long int

class Solution {
public:
    long long incremovableSubarrayCount(vector<int>& nums) {
        ll n = nums.size();
        ll left_index = 0;
        ll right_index = n-1;
        
        while(left_index+1 < n && nums[left_index] < nums[left_index+1])
        {
            left_index++;
        }
        
        while(right_index-1 >= 0 && nums[right_index] > nums[right_index - 1])
        {
            right_index--;
        }
        
        //If the entire array is strictly increasing
        if(left_index == n-1)
        {
            return (n*(n+1))/2;
        }
        
        //If not left part has taken
        ll ans = (n - right_index ) + 1;
        
        //Now calculate the left part
        for(int i=0; i<=left_index; i++)
        {
            int UPindex = upper_bound(nums.begin()+right_index, nums.end(), nums[i]) - nums.begin();
            ans += (n - UPindex + 1);
        }
        
        return ans;
    }
};


///NAIVE******

class Solution {
public:
    bool check(vector<int>& nums)
    {
        for(int i=1; i<nums.size(); i++)
        {
            if(nums[i] <= nums[i-1])
            {
                return false;
            }
        }

        return true;
    }
    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size();
        int ct = 0;
        for(int i=0; i<n; i++)
        {
            for(int j = i; j<n; j++)
            {
                //for making all subarray arr1[0-->i-1] and [j+1-->n-1]
                vector<int> arr;
                for(int k=0; k<i; k++)
                {
                    arr.push_back(nums[k]);
                }

                for(int k=j+1; k<n; k++)
                {
                    arr.push_back(nums[k]);
                }

                if(check(arr))
                {
                    ct++;
                }

            }

        }

        return ct;
    }
};
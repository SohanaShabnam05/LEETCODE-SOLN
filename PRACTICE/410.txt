Q**
Given an array arr[] of N elements and a number K., split the given array into K subarrays such that the maximum subarray sum achievable out of K subarrays formed is minimum possible. Find that possible subarray sum.

BINARY SEARCH****
SOLUTION***

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    //Leetcode 410
    int countPartition(int arr[],int N, int maxSum)
    {
        int partitions = 1;
        long long subarraySum = 0;
        
        for(int i=0; i<N; i++)
        {
            if(subarraySum + arr[i] <= maxSum)
            {
                subarraySum += arr[i];
            }
            else
            {
                partitions++;
                subarraySum = arr[i];
            }
        }
        
        return partitions;
    }
    int splitArray(int arr[] ,int N, int K) {
        // code here
        
        int low = *max_element(arr, arr+N);
        int high = accumulate(arr, arr+N, 0);
        int ans = 0;
        while(low <= high)
        {
            int mid = (low+high)/2;
            int partitions = countPartition(arr, N, mid);
            
            if(partitions > K)
            {
                low = mid+1;
            }
            else
            {
                //ans = mid;
                high = mid-1;
            }
        }
        
        return low;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        
        cin>>N>>K;
        int arr[N];
        
        for(int i=0 ; i<N ; i++)
            cin>>arr[i];

        Solution ob;
        cout<<ob.splitArray(arr,N,K);
        cout<<"\n";
    }
    return 0;
}
// } Driver Code Ends